apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "oauth2-proxy.fullname" . }}-shell-script-cm
  namespace: {{ template "oauth2-proxy.namespace" $ }}
data:
  iat_to_clienid.sh: |
    #!/bin/sh

    apk update
    apk add curl
    apk add jq
    set -x
    echo "generating a secret from IAT"

    body='{
      "client_name": "OAuth_Proxy_{{ .Values.config.IdM.CAPABILITY_INSTANCE_ID }}",
      "scope": "TSC",
      "token_endpoint_auth_method": "client_secret_basic",
      "instance_id": "{{ .Values.config.IdM.CAPABILITY_INSTANCE_ID }}",
      "redirect_uris": [
        "{{ .Values.config.IdM.DP_HOST }}/{{ .Values.config.IdM.CAPABILITY_PATH_PREFIX }}/oauth2/callback"
      ]
    }'

    exchangeIatForClientId () {
      response=$(curl -s {{ .Values.config.IdM.CP_HOST }}/idm/v1/oauth2/clients/register --header "Authorization: Bearer {{ .Values.config.IdM.IAT }}" --data "${body}" --header 'Content-Type: application/json')
      echo $response
      clientId=$(echo -n $response | jq -r .client_id | base64)
      clientSecret=$(echo -n $response | jq -r .client_secret | base64)
    }

    getSecret () {
      http_code=$(curl -s -o /dev/null -w "%{http_code}\\n" https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ template "oauth2-proxy.namespace" $ }}/secrets/{{ template "oauth2-proxy.secretName" $ }} \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        --header 'Content-Type: application/yaml')
        return $http_code
    }
    updateSecret () {
      http_code=$(curl -s -o /dev/null -w "%{http_code}\\n" https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ template "oauth2-proxy.namespace" $ }}/secrets/{{ template "oauth2-proxy.secretName" $ }} \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        --header 'Content-Type: application/yaml' \
        -X PUT \
        -d "
        apiVersion: v1
        kind: Secret
        metadata:
            name: {{ template "oauth2-proxy.secretName" $ }}
            namespace: {{ template "oauth2-proxy.namespace" $ }}
            labels:
              app.kubernetes.io/instance: oauth2-proxy
              app.kubernetes.io/part-of: {{ template "oauth2-proxy.fullname" . }}            
        type: Opaque
        data:
          client-id: $clientId
          client-secret: $clientSecret
          cookie-secret: $(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c32 | base64)
        ")
        return $http_code
    }
    createSecret () {
      http_code=$(curl -s -o /dev/null -w "%{http_code}\\n" https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ template "oauth2-proxy.namespace" $ }}/secrets \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        --header 'Content-Type: application/yaml' \
        -X POST \
        -d "
        apiVersion: v1
        kind: Secret
        metadata:
            name: {{ template "oauth2-proxy.secretName" $ }}
            namespace: {{ template "oauth2-proxy.namespace" $ }}
            labels:
              app.kubernetes.io/instance: oauth2-proxy
              app.kubernetes.io/part-of: {{ template "oauth2-proxy.fullname" . }}
        type: Opaque
        data:
          client-id: $clientId
          client-secret: $clientSecret
          cookie-secret: $(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c32 | base64)
        ")
        return $http_code
    }
    exchangeIatForClientId
    getSecret
    if [ $http_code -eq 200 ]; then
        #echo "Updating oauth2-proxy secret"
        #updateSecret
        echo "Oauth2-proxy secret exists. We will not update it."
    else
        echo "Creating new oauth2-proxy secret"
        createSecret
    fi
    if [ $http_code -ne 200 ]; then
        echo "Client registration failed. Aborting!"
        exit $http_code
    fi
    return 0